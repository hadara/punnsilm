#!/usr/bin/env python

import sys
import time
import atexit
import logging
import optparse

import logging.config
import logging.handlers

from daemons.base import Daemon

DEFAULT_PIDFILE_LOCATION = "/tmp/punnsilm.pid"

from punnsilm import state_manager, init_graph, DEFAULT_CONFIG_FILE

KNOWN_CONCURRENCY_METHODS = ("threads", "processes")

LOGLEVEL = logging.WARN

if sys.platform.startswith('linux'):
    SYSLOG_SOCKET = '/dev/log'
elif sys.platform.startswith('freebsd'):
    SYSLOG_SOCKET = "/var/run/log"

class PunnsilmDaemon(Daemon):
    def run(self):
        # XXX: all the action happens in worker threads
        while True:
            time.sleep(1)

def init_log():
    root_logger = logging.getLogger('')
    root_logger.setLevel(LOGLEVEL)

    handler = logging.handlers.SysLogHandler(address = SYSLOG_SOCKET)
    root_logger.addHandler(handler)
    stream_handler = logging.StreamHandler()
    stream_handler.setLevel(LOGLEVEL)
    root_logger.addHandler(stream_handler)

def main():
    global LOGLEVEL

    parser = optparse.OptionParser()
    parser.add_option('--daemon', help="""daemonize""", dest="daemonize", action="store_true")
    parser.add_option('--pidfile', help="""where to write the PIDfile""", default=DEFAULT_PIDFILE_LOCATION, dest="pidfile")
    parser.add_option('--no-state', help="""Read and write the state information so we would be
able to continue from the last known position after restart""", default=True, action="store_false", dest="keep_state")
    parser.add_option('--test', help="""Test mode. All the Output nodes are replaced with ConsoleOutput
and --no-state is implied""", dest="test", action="store_true")
    parser.add_option('--config', help="""Use configuration file given in argument instead of the default (conf.py)""",
    dest="config", default=DEFAULT_CONFIG_FILE)
    parser.add_option('--concurrency-method', help="""Which concurrency method to use. Currently supported values are 
threads and processes.  The default is threads. 
Using processes allows for better use of multiple cores but in the current implementation
also duplicates all the graph nodes in each process. So if you have a graph node that shares input that is sourced
from severl different inputs you will end up with two instances of that node which might have interesting consequences.""",
    dest="concurrency_method", default=None)
    parser.add_option('--node-whitelist', help="""Only use nodes in the given list irregardless of the configuration.
Basically we will try to build the initial graph as we normally would but will ignore all of the
nodes that aren't present in this whitelist. Argument should be comma separated list on node names.""", dest="node_whitelist")
    parser.add_option('--debug', help="""Print out a lot of debug information""", dest="debug", action="store_true")
    (options, args) = parser.parse_args()

    if options.debug:
        LOGLEVEL = logging.DEBUG

    init_log()

    if options.concurrency_method and options.concurrency_method not in KNOWN_CONCURRENCY_METHODS:
        logging.error('unknown concurrency method %s known methods are %s' % (
            options.concurrency_method, KNOWN_CONCURRENCY_METHODS)
        )
        sys.exit(-1)


    keep_state = options.keep_state
    # disable state keeping in the test mode
    if options.test:
        keep_state = False

    node_whitelist = []
    if options.node_whitelist:
        node_whitelist = options.node_whitelist.split(",")

    graph = init_graph(node_whitelist=node_whitelist, test_mode=options.test, keep_state=keep_state, config=options.config, 
                concurrency=options.concurrency_method)
    runnables = graph.start()

    if options.daemonize:
        daemon = PunnsilmDaemon(pidfile=options.pidfile)
        teardown_cb = lambda: state_manager.state_writer(graph.nodemap)
        if keep_state:
            daemon.tear_down.append(teardown_cb)
        daemon.start()
    else:
        if keep_state:
            atexit.register(state_manager.state_writer, graph.nodemap)

        for runnable in runnables:
            runnable.join()

if __name__ == '__main__':
    init_log()
    main()
